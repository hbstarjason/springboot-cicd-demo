#!/usr/bin/env groovy

def projectProperties = [
        [$class: 'BuildDiscarderProperty', strategy: [$class: 'LogRotator', numToKeepStr: '5']],
        parameters([
            string(name: 'DOCKER_USER', defaultValue: '', description: 'docker用户名'),
            string(name: 'DOCKER_PASSWORD', defaultValue: '', description: 'docker用户密码'),
            string(name: 'REGISTRY_URL', defaultValue: 'docker.io', description: 'docker仓库地址')
        ])
]

properties(projectProperties)

def label = "mypod-${UUID.randomUUID().toString()}"

podTemplate(label: label, cloud: 'kubernetes', serviceAccount: 'admin', containers: [
            containerTemplate(name: 'maven', image: 'maven:3.6.0-jdk-8', command: 'cat', ttyEnabled: true),
            //containerTemplate(name: 'maven', image: 'maven:3.6-alpine', command: 'cat', ttyEnabled: true),
            containerTemplate(name: 'docker', image: 'docker', command: 'cat', ttyEnabled: true),
            //containerTemplate(name: 'kubectl', image: 'cnych/kubectl', command: 'cat', ttyEnabled: true),
            //containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.10.2', command: 'cat', ttyEnabled: true),
            containerTemplate(name: 'kubectl', image: 'lachlanevenson/k8s-kubectl:v1.14.0', command: 'cat', ttyEnabled: true),
            containerTemplate(name: 'helm', image: 'cnych/helm', command: 'cat', ttyEnabled: true)
            ],
            volumes: [
                    hostPathVolume(hostPath: '/var/run/docker.sock', mountPath: '/var/run/docker.sock'),
                    //hostPathVolume(mountPath: '/root/.gradle', hostPath: '/home/gradle/.gradle'),
                    hostPathVolume(hostPath: '/root/.kube', mountPath: '/root/.kube'),
                    hostPathVolume(hostPath: '/root/.m2', mountPath: '/root/.m2')
            ],
            annotations: [
                    podAnnotation(key: "sidecar.istio.io/inject", value: "false")
            ]

) {

    node(label) {

        def gitCommit
        def shortGitCommit
        def previousGitCommit

        container('maven') {

            stage('checkout') {
                checkout scm

                sh 'printenv'

                gitCommit = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
                shortGitCommit = "${currentBuild.number}-${gitCommit[0..10]}"
                //shortGitCommit = "${gitCommit[0..10]}"    
                previousGitCommit = sh(script: "git rev-parse ${gitCommit}~", returnStdout: true)

                echo "gitCommit = ${gitCommit}"
                echo "shortGitCommit = ${shortGitCommit}"
                echo "previousGitCommit = ${previousGitCommit}"
            }
               
                //https://jenkins.io/doc/pipeline/tour/tests-and-artifacts/
            stage('pacakge') {

                sh 'mvn clean package -Dmaven.test.skip=true -s ./settings.xml'
            }
            //stage('Test') {
            //    sh 'mvn test'
            //} 

        }     //post {
              //   always {
              //    junit 'build/reports/*.xml'
              //          }
              //     }    

        container('docker') {

            stage('docker-login') {
                //REGISTRY_URL私有仓库地址，也可使用官方地址：docker.io
                sh "docker login -u ${params.DOCKER_USER} -p ${params.DOCKER_PASSWORD} ${params.REGISTRY_URL}"
            //withCredentials([usernamePassword(credentialsId: 'dockerHub', passwordVariable: 'dockerHubPassword', usernameVariable: 'dockerHubUser')]) 
              //{
                //sh "docker login -u ${dockerHubUser} -p ${dockerHubPassword}"
              //} 
            }

            stage('docker-build') {
                sh "docker build . -t ${params.REGISTRY_URL}/${params.DOCKER_USER}/springboot-devops-demo:${shortGitCommit}"
                //sh "docker tag ${params.REGISTRY_URL}/${params.DOCKER_USER}/springboot-devops-demo:${shortGitCommit}  ${params.REGISTRY_URL}/${params.DOCKER_USER}/springboot-devops-demo:latest"
            }

            stage('docker-push') {
                sh "docker push ${params.REGISTRY_URL}/${params.DOCKER_USER}/springboot-devops-demo:${shortGitCommit}"
                //sh "docker push ${params.REGISTRY_URL}/${params.DOCKER_USER}/springboot-devops-demo:latest"
            }

            stage('docker-remove') {
                sh "docker rmi ${params.REGISTRY_URL}/${params.DOCKER_USER}/springboot-devops-demo:${shortGitCommit}"
            }

        }


        container('kubectl') {
            stage('k8s deploy') {
                sh "sed -i \"s/hbstarjason\\/springboot-devops-demo/${params.REGISTRY_URL}\\/${params.DOCKER_USER}\\/springboot-devops-demo:${shortGitCommit}/g\" springboot-devops-demo.yaml"
                //sh "kubectl --kubeconfig=/root/.kube/config apply -f springboot-devops-demo.yaml"
                //sh "kubectl  create -f jenkins/admin-rbac.yaml"
                //sh "kubectl get ns |grep -w springboot-devops-demo || kubectl  create ns springboot-devops-demo"
                //sh "kubectl  apply -f springboot-devops-demo.yaml -n springboot-devops-demo"
                //kubectl get svc springboot-devops-demo -n springboot-devops-demo -o yaml |sed 's/ClusterIP/LoadBalancer/' |kubectl replace -f -
            }
        }
        

        container('helm') {
            stage('helm deploy') {
                sh "helm version"
                //sh "sed -i \"s/lusyoe\\/springboot-devops-demo/${params.REGISTRY_URL}\\/lusyoe\\/springboot-devops-demo:${shortGitCommit}/g\" charts/values.yaml"
                //sh "helm upgrade --install springboot-devops-demo charts/"
            }
        }
        container('jnlp') {    
            stage("Archive") {
                archiveArtifacts artifacts: 'build/archive/*.*', fingerprint: true, allowEmptyArchive: true
                 }
             }
            
//            catch(Exception e) {
//        currentBuild.result = "FAILURE"
//    }finally {
//        // 获取执行状态
//        def currResult = currentBuild.result ?: 'SUCCESS' 
//        // 判断执行任务状态，根据不同状态发送邮件
//        stage('email'){
//            if (currResult == 'SUCCESS') {
//                echo "发送成功邮件"
//                emailext(subject: '任务执行成功',to: '3*****7@qq.com',body: '''任务已经成功构建完成...''')
//            }else {
//                echo "发送失败邮件"
//                emailext(subject: '任务执行失败',to: '3*****7@qq.com',body: '''任务执行失败构建失败...''')
//            }
//        }
//    }
    }
     
}

// vim: ft=groovy

